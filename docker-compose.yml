version: "3.7"

services:
  postgres:
    image: "postgres:12-alpine"
    env_file: ".env"
    environment:
      POSTGRES_DB: ${POSTGRESQL_NAME}
      POSTGRES_USER: ${POSTGRESQL_USER}
      POSTGRES_PASSWORD: ${POSTGRESQL_PASS}
      PGDATA: /var/lib/postgresql/data/rankr/
    volumes:
      - "postgres:/var/lib/postgresql/data/"
    ports:
      - "${POSTGRESQL_PORT}:${POSTGRESQL_PORT}"

  adminer:
    image: "michalhosna/adminer:latest"
    env_file: ".env"
    init: true
    command: php -S ${ADMINER_HOST}:${ADMINER_PORT} -t /var/adminer
    restart: always
    depends_on:
      - postgres
    ports:
      - "${ADMINER_PORT}:${ADMINER_PORT}"

  backend:
    env_file: ".env"
    depends_on:
      - postgres
    build:
      context: ./backend
      dockerfile: backend.dockerfile
      args:
        INSTALL_PATH: ${INSTALL_PATH}
        POETRY_VERSION: ${POETRY_VERSION}
    command: sh -c "
      if [ ${APP_ENV} == 'dev' ] ; then rankr start --reload ;
      else rankr start ; fi"
    restart: on-failure
    volumes:
      - "./backend/data:${INSTALL_PATH}/data"
    ports:
      - "${APP_PORT}:${APP_PORT}"

  frontend:
    env_file: ".env"
    depends_on:
      - backend
    build:
      context: ./frontend
      dockerfile: frontend.dockerfile
      args:
        INSTALL_PATH: ${INSTALL_PATH}
        REACT_APP_APP_NAME: ${REACT_APP_APP_NAME}
        REACT_APP_APP_URL: ${REACT_APP_APP_URL}
        REACT_APP_SERVER_HOST: ${REACT_APP_SERVER_HOST}
        REACT_APP_SERVER_PORT: ${REACT_APP_SERVER_PORT}
        REACT_APP_SERVER_API_V1_STR: ${REACT_APP_SERVER_API_V1_STR}
    ports:
      - ${FRONTEND_PORT}:80

volumes:
  postgres:
